// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WireGuardClient is the client API for WireGuard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireGuardClient interface {
	ConfigureDevice(ctx context.Context, in *ConfigureDeviceRequest, opts ...grpc.CallOption) (*ConfigureDeviceResponse, error)
	Devices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error)
	Device(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
}

type wireGuardClient struct {
	cc grpc.ClientConnInterface
}

func NewWireGuardClient(cc grpc.ClientConnInterface) WireGuardClient {
	return &wireGuardClient{cc}
}

func (c *wireGuardClient) ConfigureDevice(ctx context.Context, in *ConfigureDeviceRequest, opts ...grpc.CallOption) (*ConfigureDeviceResponse, error) {
	out := new(ConfigureDeviceResponse)
	err := c.cc.Invoke(ctx, "/WireGuard/ConfigureDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireGuardClient) Devices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := c.cc.Invoke(ctx, "/WireGuard/Devices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireGuardClient) Device(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/WireGuard/Device", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WireGuardServer is the server API for WireGuard service.
// All implementations must embed UnimplementedWireGuardServer
// for forward compatibility
type WireGuardServer interface {
	ConfigureDevice(context.Context, *ConfigureDeviceRequest) (*ConfigureDeviceResponse, error)
	Devices(context.Context, *DevicesRequest) (*DevicesResponse, error)
	Device(context.Context, *DeviceRequest) (*DeviceResponse, error)
	mustEmbedUnimplementedWireGuardServer()
}

// UnimplementedWireGuardServer must be embedded to have forward compatible implementations.
type UnimplementedWireGuardServer struct {
}

func (UnimplementedWireGuardServer) ConfigureDevice(context.Context, *ConfigureDeviceRequest) (*ConfigureDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDevice not implemented")
}
func (UnimplementedWireGuardServer) Devices(context.Context, *DevicesRequest) (*DevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Devices not implemented")
}
func (UnimplementedWireGuardServer) Device(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Device not implemented")
}
func (UnimplementedWireGuardServer) mustEmbedUnimplementedWireGuardServer() {}

// UnsafeWireGuardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireGuardServer will
// result in compilation errors.
type UnsafeWireGuardServer interface {
	mustEmbedUnimplementedWireGuardServer()
}

func RegisterWireGuardServer(s grpc.ServiceRegistrar, srv WireGuardServer) {
	s.RegisterService(&WireGuard_ServiceDesc, srv)
}

func _WireGuard_ConfigureDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireGuardServer).ConfigureDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WireGuard/ConfigureDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireGuardServer).ConfigureDevice(ctx, req.(*ConfigureDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireGuard_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireGuardServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WireGuard/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireGuardServer).Devices(ctx, req.(*DevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireGuard_Device_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireGuardServer).Device(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WireGuard/Device",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireGuardServer).Device(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WireGuard_ServiceDesc is the grpc.ServiceDesc for WireGuard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WireGuard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WireGuard",
	HandlerType: (*WireGuardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureDevice",
			Handler:    _WireGuard_ConfigureDevice_Handler,
		},
		{
			MethodName: "Devices",
			Handler:    _WireGuard_Devices_Handler,
		},
		{
			MethodName: "Device",
			Handler:    _WireGuard_Device_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
